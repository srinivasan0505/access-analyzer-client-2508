/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationKmsKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConfigurationKmsKey {
  public static final String SERIALIZED_NAME_KEY_POLICIES = "keyPolicies";
  @SerializedName(SERIALIZED_NAME_KEY_POLICIES)
  @javax.annotation.Nullable
  private Map keyPolicies;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  @javax.annotation.Nullable
  private List grants;

  public ConfigurationKmsKey() {
  }

  public ConfigurationKmsKey keyPolicies(@javax.annotation.Nullable Map keyPolicies) {
    this.keyPolicies = keyPolicies;
    return this;
  }

  /**
   * Get keyPolicies
   * @return keyPolicies
   */
  @javax.annotation.Nullable
  public Map getKeyPolicies() {
    return keyPolicies;
  }

  public void setKeyPolicies(@javax.annotation.Nullable Map keyPolicies) {
    this.keyPolicies = keyPolicies;
  }


  public ConfigurationKmsKey grants(@javax.annotation.Nullable List grants) {
    this.grants = grants;
    return this;
  }

  /**
   * Get grants
   * @return grants
   */
  @javax.annotation.Nullable
  public List getGrants() {
    return grants;
  }

  public void setGrants(@javax.annotation.Nullable List grants) {
    this.grants = grants;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationKmsKey configurationKmsKey = (ConfigurationKmsKey) o;
    return Objects.equals(this.keyPolicies, configurationKmsKey.keyPolicies) &&
        Objects.equals(this.grants, configurationKmsKey.grants);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyPolicies, grants);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationKmsKey {\n");
    sb.append("    keyPolicies: ").append(toIndentedString(keyPolicies)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyPolicies");
    openapiFields.add("grants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationKmsKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationKmsKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationKmsKey is not found in the empty JSON string", ConfigurationKmsKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationKmsKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationKmsKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `keyPolicies`
      if (jsonObj.get("keyPolicies") != null && !jsonObj.get("keyPolicies").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("keyPolicies"));
      }
      // validate the optional field `grants`
      if (jsonObj.get("grants") != null && !jsonObj.get("grants").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("grants"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationKmsKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationKmsKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationKmsKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationKmsKey.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationKmsKey>() {
           @Override
           public void write(JsonWriter out, ConfigurationKmsKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationKmsKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationKmsKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationKmsKey
   * @throws IOException if the JSON string is invalid with respect to ConfigurationKmsKey
   */
  public static ConfigurationKmsKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationKmsKey.class);
  }

  /**
   * Convert an instance of ConfigurationKmsKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

