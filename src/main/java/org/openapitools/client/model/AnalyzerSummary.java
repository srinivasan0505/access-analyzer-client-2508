/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AnalyzerStatus;
import org.openapitools.client.model.AnalyzerSummaryStatusReason;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the analyzer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AnalyzerSummary {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  @javax.annotation.Nonnull
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private Type type;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_RESOURCE_ANALYZED = "lastResourceAnalyzed";
  @SerializedName(SERIALIZED_NAME_LAST_RESOURCE_ANALYZED)
  @javax.annotation.Nullable
  private String lastResourceAnalyzed;

  public static final String SERIALIZED_NAME_LAST_RESOURCE_ANALYZED_AT = "lastResourceAnalyzedAt";
  @SerializedName(SERIALIZED_NAME_LAST_RESOURCE_ANALYZED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime lastResourceAnalyzedAt;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map tags;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private AnalyzerStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  @javax.annotation.Nullable
  private AnalyzerSummaryStatusReason statusReason;

  public AnalyzerSummary() {
  }

  public AnalyzerSummary arn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(@javax.annotation.Nonnull String arn) {
    this.arn = arn;
  }


  public AnalyzerSummary name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AnalyzerSummary type(@javax.annotation.Nonnull Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public Type getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull Type type) {
    this.type = type;
  }


  public AnalyzerSummary createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AnalyzerSummary lastResourceAnalyzed(@javax.annotation.Nullable String lastResourceAnalyzed) {
    this.lastResourceAnalyzed = lastResourceAnalyzed;
    return this;
  }

  /**
   * Get lastResourceAnalyzed
   * @return lastResourceAnalyzed
   */
  @javax.annotation.Nullable
  public String getLastResourceAnalyzed() {
    return lastResourceAnalyzed;
  }

  public void setLastResourceAnalyzed(@javax.annotation.Nullable String lastResourceAnalyzed) {
    this.lastResourceAnalyzed = lastResourceAnalyzed;
  }


  public AnalyzerSummary lastResourceAnalyzedAt(@javax.annotation.Nullable OffsetDateTime lastResourceAnalyzedAt) {
    this.lastResourceAnalyzedAt = lastResourceAnalyzedAt;
    return this;
  }

  /**
   * Get lastResourceAnalyzedAt
   * @return lastResourceAnalyzedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastResourceAnalyzedAt() {
    return lastResourceAnalyzedAt;
  }

  public void setLastResourceAnalyzedAt(@javax.annotation.Nullable OffsetDateTime lastResourceAnalyzedAt) {
    this.lastResourceAnalyzedAt = lastResourceAnalyzedAt;
  }


  public AnalyzerSummary tags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map tags) {
    this.tags = tags;
  }


  public AnalyzerSummary status(@javax.annotation.Nonnull AnalyzerStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AnalyzerStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull AnalyzerStatus status) {
    this.status = status;
  }


  public AnalyzerSummary statusReason(@javax.annotation.Nullable AnalyzerSummaryStatusReason statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public AnalyzerSummaryStatusReason getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(@javax.annotation.Nullable AnalyzerSummaryStatusReason statusReason) {
    this.statusReason = statusReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzerSummary analyzerSummary = (AnalyzerSummary) o;
    return Objects.equals(this.arn, analyzerSummary.arn) &&
        Objects.equals(this.name, analyzerSummary.name) &&
        Objects.equals(this.type, analyzerSummary.type) &&
        Objects.equals(this.createdAt, analyzerSummary.createdAt) &&
        Objects.equals(this.lastResourceAnalyzed, analyzerSummary.lastResourceAnalyzed) &&
        Objects.equals(this.lastResourceAnalyzedAt, analyzerSummary.lastResourceAnalyzedAt) &&
        Objects.equals(this.tags, analyzerSummary.tags) &&
        Objects.equals(this.status, analyzerSummary.status) &&
        Objects.equals(this.statusReason, analyzerSummary.statusReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, type, createdAt, lastResourceAnalyzed, lastResourceAnalyzedAt, tags, status, statusReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzerSummary {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastResourceAnalyzed: ").append(toIndentedString(lastResourceAnalyzed)).append("\n");
    sb.append("    lastResourceAnalyzedAt: ").append(toIndentedString(lastResourceAnalyzedAt)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("createdAt");
    openapiFields.add("lastResourceAnalyzed");
    openapiFields.add("lastResourceAnalyzedAt");
    openapiFields.add("tags");
    openapiFields.add("status");
    openapiFields.add("statusReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzerSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzerSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzerSummary is not found in the empty JSON string", AnalyzerSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzerSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzerSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyzerSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `type`
      Type.validateJsonElement(jsonObj.get("type"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the optional field `lastResourceAnalyzed`
      if (jsonObj.get("lastResourceAnalyzed") != null && !jsonObj.get("lastResourceAnalyzed").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastResourceAnalyzed"));
      }
      // validate the optional field `lastResourceAnalyzedAt`
      if (jsonObj.get("lastResourceAnalyzedAt") != null && !jsonObj.get("lastResourceAnalyzedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastResourceAnalyzedAt"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `status`
      AnalyzerStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `statusReason`
      if (jsonObj.get("statusReason") != null && !jsonObj.get("statusReason").isJsonNull()) {
        AnalyzerSummaryStatusReason.validateJsonElement(jsonObj.get("statusReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzerSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzerSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzerSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzerSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzerSummary>() {
           @Override
           public void write(JsonWriter out, AnalyzerSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzerSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzerSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzerSummary
   * @throws IOException if the JSON string is invalid with respect to AnalyzerSummary
   */
  public static AnalyzerSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzerSummary.class);
  }

  /**
   * Convert an instance of AnalyzerSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

