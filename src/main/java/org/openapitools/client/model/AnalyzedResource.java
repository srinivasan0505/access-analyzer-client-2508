/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FindingStatus;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about the analyzed resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AnalyzedResource {
  public static final String SERIALIZED_NAME_RESOURCE_ARN = "resourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  @javax.annotation.Nonnull
  private String resourceArn;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  @javax.annotation.Nonnull
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ANALYZED_AT = "analyzedAt";
  @SerializedName(SERIALIZED_NAME_ANALYZED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime analyzedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  @javax.annotation.Nonnull
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  @javax.annotation.Nullable
  private List actions;

  public static final String SERIALIZED_NAME_SHARED_VIA = "sharedVia";
  @SerializedName(SERIALIZED_NAME_SHARED_VIA)
  @javax.annotation.Nullable
  private List sharedVia;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private FindingStatus status;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_ACCOUNT = "resourceOwnerAccount";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_ACCOUNT)
  @javax.annotation.Nonnull
  private String resourceOwnerAccount;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public AnalyzedResource() {
  }

  public AnalyzedResource resourceArn(@javax.annotation.Nonnull String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nonnull
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(@javax.annotation.Nonnull String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public AnalyzedResource resourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public AnalyzedResource createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AnalyzedResource analyzedAt(@javax.annotation.Nonnull OffsetDateTime analyzedAt) {
    this.analyzedAt = analyzedAt;
    return this;
  }

  /**
   * Get analyzedAt
   * @return analyzedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getAnalyzedAt() {
    return analyzedAt;
  }

  public void setAnalyzedAt(@javax.annotation.Nonnull OffsetDateTime analyzedAt) {
    this.analyzedAt = analyzedAt;
  }


  public AnalyzedResource updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AnalyzedResource isPublic(@javax.annotation.Nonnull Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nonnull
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(@javax.annotation.Nonnull Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public AnalyzedResource actions(@javax.annotation.Nullable List actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List getActions() {
    return actions;
  }

  public void setActions(@javax.annotation.Nullable List actions) {
    this.actions = actions;
  }


  public AnalyzedResource sharedVia(@javax.annotation.Nullable List sharedVia) {
    this.sharedVia = sharedVia;
    return this;
  }

  /**
   * Get sharedVia
   * @return sharedVia
   */
  @javax.annotation.Nullable
  public List getSharedVia() {
    return sharedVia;
  }

  public void setSharedVia(@javax.annotation.Nullable List sharedVia) {
    this.sharedVia = sharedVia;
  }


  public AnalyzedResource status(@javax.annotation.Nullable FindingStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public FindingStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable FindingStatus status) {
    this.status = status;
  }


  public AnalyzedResource resourceOwnerAccount(@javax.annotation.Nonnull String resourceOwnerAccount) {
    this.resourceOwnerAccount = resourceOwnerAccount;
    return this;
  }

  /**
   * Get resourceOwnerAccount
   * @return resourceOwnerAccount
   */
  @javax.annotation.Nonnull
  public String getResourceOwnerAccount() {
    return resourceOwnerAccount;
  }

  public void setResourceOwnerAccount(@javax.annotation.Nonnull String resourceOwnerAccount) {
    this.resourceOwnerAccount = resourceOwnerAccount;
  }


  public AnalyzedResource error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyzedResource analyzedResource = (AnalyzedResource) o;
    return Objects.equals(this.resourceArn, analyzedResource.resourceArn) &&
        Objects.equals(this.resourceType, analyzedResource.resourceType) &&
        Objects.equals(this.createdAt, analyzedResource.createdAt) &&
        Objects.equals(this.analyzedAt, analyzedResource.analyzedAt) &&
        Objects.equals(this.updatedAt, analyzedResource.updatedAt) &&
        Objects.equals(this.isPublic, analyzedResource.isPublic) &&
        Objects.equals(this.actions, analyzedResource.actions) &&
        Objects.equals(this.sharedVia, analyzedResource.sharedVia) &&
        Objects.equals(this.status, analyzedResource.status) &&
        Objects.equals(this.resourceOwnerAccount, analyzedResource.resourceOwnerAccount) &&
        Objects.equals(this.error, analyzedResource.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArn, resourceType, createdAt, analyzedAt, updatedAt, isPublic, actions, sharedVia, status, resourceOwnerAccount, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyzedResource {\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    analyzedAt: ").append(toIndentedString(analyzedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    sharedVia: ").append(toIndentedString(sharedVia)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resourceOwnerAccount: ").append(toIndentedString(resourceOwnerAccount)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceArn");
    openapiFields.add("resourceType");
    openapiFields.add("createdAt");
    openapiFields.add("analyzedAt");
    openapiFields.add("updatedAt");
    openapiFields.add("isPublic");
    openapiFields.add("actions");
    openapiFields.add("sharedVia");
    openapiFields.add("status");
    openapiFields.add("resourceOwnerAccount");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceArn");
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("analyzedAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("isPublic");
    openapiRequiredFields.add("resourceOwnerAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyzedResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyzedResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyzedResource is not found in the empty JSON string", AnalyzedResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyzedResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyzedResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AnalyzedResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `resourceArn`
      String.validateJsonElement(jsonObj.get("resourceArn"));
      // validate the required field `resourceType`
      ResourceType.validateJsonElement(jsonObj.get("resourceType"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `analyzedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("analyzedAt"));
      // validate the required field `updatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
      // validate the required field `isPublic`
      Boolean.validateJsonElement(jsonObj.get("isPublic"));
      // validate the optional field `actions`
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("actions"));
      }
      // validate the optional field `sharedVia`
      if (jsonObj.get("sharedVia") != null && !jsonObj.get("sharedVia").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sharedVia"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        FindingStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the required field `resourceOwnerAccount`
      String.validateJsonElement(jsonObj.get("resourceOwnerAccount"));
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyzedResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyzedResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyzedResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyzedResource.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyzedResource>() {
           @Override
           public void write(JsonWriter out, AnalyzedResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyzedResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyzedResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyzedResource
   * @throws IOException if the JSON string is invalid with respect to AnalyzedResource
   */
  public static AnalyzedResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyzedResource.class);
  }

  /**
   * Convert an instance of AnalyzedResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

