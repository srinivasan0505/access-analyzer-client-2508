/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.InlineArchiveRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnalyzerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateAnalyzerRequest {
  public static final String SERIALIZED_NAME_ANALYZER_NAME = "analyzerName";
  @SerializedName(SERIALIZED_NAME_ANALYZER_NAME)
  @javax.annotation.Nonnull
  private String analyzerName;

  /**
   * The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ACCOUNT("ACCOUNT"),
    
    ORGANIZATION("ORGANIZATION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ARCHIVE_RULES = "archiveRules";
  @SerializedName(SERIALIZED_NAME_ARCHIVE_RULES)
  @javax.annotation.Nullable
  private List<InlineArchiveRule> archiveRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public CreateAnalyzerRequest() {
  }

  public CreateAnalyzerRequest analyzerName(@javax.annotation.Nonnull String analyzerName) {
    this.analyzerName = analyzerName;
    return this;
  }

  /**
   * The name of the analyzer to create.
   * @return analyzerName
   */
  @javax.annotation.Nonnull
  public String getAnalyzerName() {
    return analyzerName;
  }

  public void setAnalyzerName(@javax.annotation.Nonnull String analyzerName) {
    this.analyzerName = analyzerName;
  }


  public CreateAnalyzerRequest type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of analyzer to create. Only ACCOUNT and ORGANIZATION analyzers are supported. You can create only one analyzer per account per Region. You can create up to 5 analyzers per organization per Region.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public CreateAnalyzerRequest archiveRules(@javax.annotation.Nullable List<InlineArchiveRule> archiveRules) {
    this.archiveRules = archiveRules;
    return this;
  }

  public CreateAnalyzerRequest addArchiveRulesItem(InlineArchiveRule archiveRulesItem) {
    if (this.archiveRules == null) {
      this.archiveRules = new ArrayList<>();
    }
    this.archiveRules.add(archiveRulesItem);
    return this;
  }

  /**
   * Specifies the archive rules to add for the analyzer. Archive rules automatically archive findings that meet the criteria you define for the rule.
   * @return archiveRules
   */
  @javax.annotation.Nullable
  public List<InlineArchiveRule> getArchiveRules() {
    return archiveRules;
  }

  public void setArchiveRules(@javax.annotation.Nullable List<InlineArchiveRule> archiveRules) {
    this.archiveRules = archiveRules;
  }


  public CreateAnalyzerRequest tags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAnalyzerRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to apply to the analyzer.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateAnalyzerRequest clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A client token.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnalyzerRequest createAnalyzerRequest = (CreateAnalyzerRequest) o;
    return Objects.equals(this.analyzerName, createAnalyzerRequest.analyzerName) &&
        Objects.equals(this.type, createAnalyzerRequest.type) &&
        Objects.equals(this.archiveRules, createAnalyzerRequest.archiveRules) &&
        Objects.equals(this.tags, createAnalyzerRequest.tags) &&
        Objects.equals(this.clientToken, createAnalyzerRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzerName, type, archiveRules, tags, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnalyzerRequest {\n");
    sb.append("    analyzerName: ").append(toIndentedString(analyzerName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    archiveRules: ").append(toIndentedString(archiveRules)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzerName");
    openapiFields.add("type");
    openapiFields.add("archiveRules");
    openapiFields.add("tags");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("analyzerName");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnalyzerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnalyzerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnalyzerRequest is not found in the empty JSON string", CreateAnalyzerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnalyzerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnalyzerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnalyzerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("analyzerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzerName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (jsonObj.get("archiveRules") != null && !jsonObj.get("archiveRules").isJsonNull()) {
        JsonArray jsonArrayarchiveRules = jsonObj.getAsJsonArray("archiveRules");
        if (jsonArrayarchiveRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("archiveRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `archiveRules` to be an array in the JSON string but got `%s`", jsonObj.get("archiveRules").toString()));
          }

          // validate the optional field `archiveRules` (array)
          for (int i = 0; i < jsonArrayarchiveRules.size(); i++) {
            InlineArchiveRule.validateJsonElement(jsonArrayarchiveRules.get(i));
          };
        }
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnalyzerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnalyzerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnalyzerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnalyzerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnalyzerRequest>() {
           @Override
           public void write(JsonWriter out, CreateAnalyzerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnalyzerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnalyzerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnalyzerRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAnalyzerRequest
   */
  public static CreateAnalyzerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnalyzerRequest.class);
  }

  /**
   * Convert an instance of CreateAnalyzerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

