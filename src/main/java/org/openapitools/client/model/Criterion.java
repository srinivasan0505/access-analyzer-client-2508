/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The criteria to use in the filter that defines the archive rule. For more information on available filter keys, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html\&quot;&gt;IAM Access Analyzer filter keys&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class Criterion {
  public static final String SERIALIZED_NAME_EQ = "eq";
  @SerializedName(SERIALIZED_NAME_EQ)
  @javax.annotation.Nullable
  private List eq;

  public static final String SERIALIZED_NAME_NEQ = "neq";
  @SerializedName(SERIALIZED_NAME_NEQ)
  @javax.annotation.Nullable
  private List neq;

  public static final String SERIALIZED_NAME_CONTAINS = "contains";
  @SerializedName(SERIALIZED_NAME_CONTAINS)
  @javax.annotation.Nullable
  private List contains;

  public static final String SERIALIZED_NAME_EXISTS = "exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  @javax.annotation.Nullable
  private Boolean exists;

  public Criterion() {
  }

  public Criterion eq(@javax.annotation.Nullable List eq) {
    this.eq = eq;
    return this;
  }

  /**
   * Get eq
   * @return eq
   */
  @javax.annotation.Nullable
  public List getEq() {
    return eq;
  }

  public void setEq(@javax.annotation.Nullable List eq) {
    this.eq = eq;
  }


  public Criterion neq(@javax.annotation.Nullable List neq) {
    this.neq = neq;
    return this;
  }

  /**
   * Get neq
   * @return neq
   */
  @javax.annotation.Nullable
  public List getNeq() {
    return neq;
  }

  public void setNeq(@javax.annotation.Nullable List neq) {
    this.neq = neq;
  }


  public Criterion contains(@javax.annotation.Nullable List contains) {
    this.contains = contains;
    return this;
  }

  /**
   * Get contains
   * @return contains
   */
  @javax.annotation.Nullable
  public List getContains() {
    return contains;
  }

  public void setContains(@javax.annotation.Nullable List contains) {
    this.contains = contains;
  }


  public Criterion exists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Get exists
   * @return exists
   */
  @javax.annotation.Nullable
  public Boolean getExists() {
    return exists;
  }

  public void setExists(@javax.annotation.Nullable Boolean exists) {
    this.exists = exists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Criterion criterion = (Criterion) o;
    return Objects.equals(this.eq, criterion.eq) &&
        Objects.equals(this.neq, criterion.neq) &&
        Objects.equals(this.contains, criterion.contains) &&
        Objects.equals(this.exists, criterion.exists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eq, neq, contains, exists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Criterion {\n");
    sb.append("    eq: ").append(toIndentedString(eq)).append("\n");
    sb.append("    neq: ").append(toIndentedString(neq)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eq");
    openapiFields.add("neq");
    openapiFields.add("contains");
    openapiFields.add("exists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Criterion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Criterion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Criterion is not found in the empty JSON string", Criterion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Criterion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Criterion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eq`
      if (jsonObj.get("eq") != null && !jsonObj.get("eq").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eq"));
      }
      // validate the optional field `neq`
      if (jsonObj.get("neq") != null && !jsonObj.get("neq").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("neq"));
      }
      // validate the optional field `contains`
      if (jsonObj.get("contains") != null && !jsonObj.get("contains").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("contains"));
      }
      // validate the optional field `exists`
      if (jsonObj.get("exists") != null && !jsonObj.get("exists").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("exists"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Criterion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Criterion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Criterion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Criterion.class));

       return (TypeAdapter<T>) new TypeAdapter<Criterion>() {
           @Override
           public void write(JsonWriter out, Criterion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Criterion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Criterion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Criterion
   * @throws IOException if the JSON string is invalid with respect to Criterion
   */
  public static Criterion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Criterion.class);
  }

  /**
   * Convert an instance of Criterion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

