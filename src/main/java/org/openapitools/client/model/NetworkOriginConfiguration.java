/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VpcConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The proposed &lt;code&gt;InternetConfiguration&lt;/code&gt; or &lt;code&gt;VpcConfiguration&lt;/code&gt; to apply to the Amazon S3 access point. &lt;code&gt;VpcConfiguration&lt;/code&gt; does not apply to multi-region access points. You can make the access point accessible from the internet, or you can specify that all requests made through that access point must originate from a specific virtual private cloud (VPC). You can specify only one type of network configuration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html\&quot;&gt;Creating access points&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class NetworkOriginConfiguration {
  public static final String SERIALIZED_NAME_VPC_CONFIGURATION = "vpcConfiguration";
  @SerializedName(SERIALIZED_NAME_VPC_CONFIGURATION)
  @javax.annotation.Nullable
  private VpcConfiguration vpcConfiguration;

  public static final String SERIALIZED_NAME_INTERNET_CONFIGURATION = "internetConfiguration";
  @SerializedName(SERIALIZED_NAME_INTERNET_CONFIGURATION)
  @javax.annotation.Nullable
  private Object internetConfiguration;

  public NetworkOriginConfiguration() {
  }

  public NetworkOriginConfiguration vpcConfiguration(@javax.annotation.Nullable VpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
    return this;
  }

  /**
   * Get vpcConfiguration
   * @return vpcConfiguration
   */
  @javax.annotation.Nullable
  public VpcConfiguration getVpcConfiguration() {
    return vpcConfiguration;
  }

  public void setVpcConfiguration(@javax.annotation.Nullable VpcConfiguration vpcConfiguration) {
    this.vpcConfiguration = vpcConfiguration;
  }


  public NetworkOriginConfiguration internetConfiguration(@javax.annotation.Nullable Object internetConfiguration) {
    this.internetConfiguration = internetConfiguration;
    return this;
  }

  /**
   * Get internetConfiguration
   * @return internetConfiguration
   */
  @javax.annotation.Nullable
  public Object getInternetConfiguration() {
    return internetConfiguration;
  }

  public void setInternetConfiguration(@javax.annotation.Nullable Object internetConfiguration) {
    this.internetConfiguration = internetConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkOriginConfiguration networkOriginConfiguration = (NetworkOriginConfiguration) o;
    return Objects.equals(this.vpcConfiguration, networkOriginConfiguration.vpcConfiguration) &&
        Objects.equals(this.internetConfiguration, networkOriginConfiguration.internetConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vpcConfiguration, internetConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkOriginConfiguration {\n");
    sb.append("    vpcConfiguration: ").append(toIndentedString(vpcConfiguration)).append("\n");
    sb.append("    internetConfiguration: ").append(toIndentedString(internetConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vpcConfiguration");
    openapiFields.add("internetConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkOriginConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkOriginConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkOriginConfiguration is not found in the empty JSON string", NetworkOriginConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkOriginConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkOriginConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `vpcConfiguration`
      if (jsonObj.get("vpcConfiguration") != null && !jsonObj.get("vpcConfiguration").isJsonNull()) {
        VpcConfiguration.validateJsonElement(jsonObj.get("vpcConfiguration"));
      }
      // validate the optional field `internetConfiguration`
      if (jsonObj.get("internetConfiguration") != null && !jsonObj.get("internetConfiguration").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("internetConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkOriginConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkOriginConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkOriginConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkOriginConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkOriginConfiguration>() {
           @Override
           public void write(JsonWriter out, NetworkOriginConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkOriginConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkOriginConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkOriginConfiguration
   * @throws IOException if the JSON string is invalid with respect to NetworkOriginConfiguration
   */
  public static NetworkOriginConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkOriginConfiguration.class);
  }

  /**
   * Convert an instance of NetworkOriginConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

