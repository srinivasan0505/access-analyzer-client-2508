/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The configuration for a Secrets Manager secret. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html\&quot;&gt;CreateSecret&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can propose a configuration for a new secret or an existing secret that you own by specifying the secret policy and optional KMS encryption key. If the configuration is for an existing secret and you do not specify the secret policy, the access preview uses the existing policy for the secret. If the access preview is for a new resource and you do not specify the policy, the access preview assumes a secret without a policy. To propose deletion of an existing policy, you can specify an empty string. If the proposed configuration is for a new secret and you do not specify the KMS key ID, the access preview uses the Amazon Web Services managed key &lt;code&gt;aws/secretsmanager&lt;/code&gt;. If you specify an empty string for the KMS key ID, the access preview uses the Amazon Web Services managed key of the Amazon Web Services account. For more information about secret policy limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_limits.html\&quot;&gt;Quotas for Secrets Manager.&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class SecretsManagerSecretConfiguration {
  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  @javax.annotation.Nullable
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_SECRET_POLICY = "secretPolicy";
  @SerializedName(SERIALIZED_NAME_SECRET_POLICY)
  @javax.annotation.Nullable
  private String secretPolicy;

  public SecretsManagerSecretConfiguration() {
  }

  public SecretsManagerSecretConfiguration kmsKeyId(@javax.annotation.Nullable String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(@javax.annotation.Nullable String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public SecretsManagerSecretConfiguration secretPolicy(@javax.annotation.Nullable String secretPolicy) {
    this.secretPolicy = secretPolicy;
    return this;
  }

  /**
   * Get secretPolicy
   * @return secretPolicy
   */
  @javax.annotation.Nullable
  public String getSecretPolicy() {
    return secretPolicy;
  }

  public void setSecretPolicy(@javax.annotation.Nullable String secretPolicy) {
    this.secretPolicy = secretPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretsManagerSecretConfiguration secretsManagerSecretConfiguration = (SecretsManagerSecretConfiguration) o;
    return Objects.equals(this.kmsKeyId, secretsManagerSecretConfiguration.kmsKeyId) &&
        Objects.equals(this.secretPolicy, secretsManagerSecretConfiguration.secretPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kmsKeyId, secretPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretsManagerSecretConfiguration {\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    secretPolicy: ").append(toIndentedString(secretPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kmsKeyId");
    openapiFields.add("secretPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretsManagerSecretConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretsManagerSecretConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretsManagerSecretConfiguration is not found in the empty JSON string", SecretsManagerSecretConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretsManagerSecretConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretsManagerSecretConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `kmsKeyId`
      if (jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyId"));
      }
      // validate the optional field `secretPolicy`
      if (jsonObj.get("secretPolicy") != null && !jsonObj.get("secretPolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("secretPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretsManagerSecretConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretsManagerSecretConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretsManagerSecretConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretsManagerSecretConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretsManagerSecretConfiguration>() {
           @Override
           public void write(JsonWriter out, SecretsManagerSecretConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretsManagerSecretConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretsManagerSecretConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretsManagerSecretConfiguration
   * @throws IOException if the JSON string is invalid with respect to SecretsManagerSecretConfiguration
   */
  public static SecretsManagerSecretConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretsManagerSecretConfiguration.class);
  }

  /**
   * Convert an instance of SecretsManagerSecretConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

