/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3AccessPointConfigurationNetworkOrigin;
import org.openapitools.client.model.S3AccessPointConfigurationPublicAccessBlock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for an Amazon S3 access point or multi-region access point for the bucket. You can propose up to 10 access points or multi-region access points per bucket. If the proposed Amazon S3 access point configuration is for an existing bucket, the access preview uses the proposed access point configuration in place of the existing access points. To propose an access point without a policy, you can provide an empty string as the access point policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/creating-access-points.html\&quot;&gt;Creating access points&lt;/a&gt;. For more information about access point policy limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/dev/access-points-restrictions-limitations.html\&quot;&gt;Access points restrictions and limitations&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class S3AccessPointConfiguration {
  public static final String SERIALIZED_NAME_ACCESS_POINT_POLICY = "accessPointPolicy";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINT_POLICY)
  @javax.annotation.Nullable
  private String accessPointPolicy;

  public static final String SERIALIZED_NAME_PUBLIC_ACCESS_BLOCK = "publicAccessBlock";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ACCESS_BLOCK)
  @javax.annotation.Nullable
  private S3AccessPointConfigurationPublicAccessBlock publicAccessBlock;

  public static final String SERIALIZED_NAME_NETWORK_ORIGIN = "networkOrigin";
  @SerializedName(SERIALIZED_NAME_NETWORK_ORIGIN)
  @javax.annotation.Nullable
  private S3AccessPointConfigurationNetworkOrigin networkOrigin;

  public S3AccessPointConfiguration() {
  }

  public S3AccessPointConfiguration accessPointPolicy(@javax.annotation.Nullable String accessPointPolicy) {
    this.accessPointPolicy = accessPointPolicy;
    return this;
  }

  /**
   * Get accessPointPolicy
   * @return accessPointPolicy
   */
  @javax.annotation.Nullable
  public String getAccessPointPolicy() {
    return accessPointPolicy;
  }

  public void setAccessPointPolicy(@javax.annotation.Nullable String accessPointPolicy) {
    this.accessPointPolicy = accessPointPolicy;
  }


  public S3AccessPointConfiguration publicAccessBlock(@javax.annotation.Nullable S3AccessPointConfigurationPublicAccessBlock publicAccessBlock) {
    this.publicAccessBlock = publicAccessBlock;
    return this;
  }

  /**
   * Get publicAccessBlock
   * @return publicAccessBlock
   */
  @javax.annotation.Nullable
  public S3AccessPointConfigurationPublicAccessBlock getPublicAccessBlock() {
    return publicAccessBlock;
  }

  public void setPublicAccessBlock(@javax.annotation.Nullable S3AccessPointConfigurationPublicAccessBlock publicAccessBlock) {
    this.publicAccessBlock = publicAccessBlock;
  }


  public S3AccessPointConfiguration networkOrigin(@javax.annotation.Nullable S3AccessPointConfigurationNetworkOrigin networkOrigin) {
    this.networkOrigin = networkOrigin;
    return this;
  }

  /**
   * Get networkOrigin
   * @return networkOrigin
   */
  @javax.annotation.Nullable
  public S3AccessPointConfigurationNetworkOrigin getNetworkOrigin() {
    return networkOrigin;
  }

  public void setNetworkOrigin(@javax.annotation.Nullable S3AccessPointConfigurationNetworkOrigin networkOrigin) {
    this.networkOrigin = networkOrigin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3AccessPointConfiguration s3AccessPointConfiguration = (S3AccessPointConfiguration) o;
    return Objects.equals(this.accessPointPolicy, s3AccessPointConfiguration.accessPointPolicy) &&
        Objects.equals(this.publicAccessBlock, s3AccessPointConfiguration.publicAccessBlock) &&
        Objects.equals(this.networkOrigin, s3AccessPointConfiguration.networkOrigin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPointPolicy, publicAccessBlock, networkOrigin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3AccessPointConfiguration {\n");
    sb.append("    accessPointPolicy: ").append(toIndentedString(accessPointPolicy)).append("\n");
    sb.append("    publicAccessBlock: ").append(toIndentedString(publicAccessBlock)).append("\n");
    sb.append("    networkOrigin: ").append(toIndentedString(networkOrigin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPointPolicy");
    openapiFields.add("publicAccessBlock");
    openapiFields.add("networkOrigin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3AccessPointConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3AccessPointConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3AccessPointConfiguration is not found in the empty JSON string", S3AccessPointConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3AccessPointConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3AccessPointConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessPointPolicy`
      if (jsonObj.get("accessPointPolicy") != null && !jsonObj.get("accessPointPolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("accessPointPolicy"));
      }
      // validate the optional field `publicAccessBlock`
      if (jsonObj.get("publicAccessBlock") != null && !jsonObj.get("publicAccessBlock").isJsonNull()) {
        S3AccessPointConfigurationPublicAccessBlock.validateJsonElement(jsonObj.get("publicAccessBlock"));
      }
      // validate the optional field `networkOrigin`
      if (jsonObj.get("networkOrigin") != null && !jsonObj.get("networkOrigin").isJsonNull()) {
        S3AccessPointConfigurationNetworkOrigin.validateJsonElement(jsonObj.get("networkOrigin"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3AccessPointConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3AccessPointConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3AccessPointConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3AccessPointConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<S3AccessPointConfiguration>() {
           @Override
           public void write(JsonWriter out, S3AccessPointConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3AccessPointConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3AccessPointConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3AccessPointConfiguration
   * @throws IOException if the JSON string is invalid with respect to S3AccessPointConfiguration
   */
  public static S3AccessPointConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3AccessPointConfiguration.class);
  }

  /**
   * Convert an instance of S3AccessPointConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

