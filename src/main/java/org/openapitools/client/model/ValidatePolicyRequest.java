/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValidatePolicyRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ValidatePolicyRequest {
  /**
   * The locale to use for localizing the findings.
   */
  @JsonAdapter(LocaleEnum.Adapter.class)
  public enum LocaleEnum {
    DE("DE"),
    
    EN("EN"),
    
    ES("ES"),
    
    FR("FR"),
    
    IT("IT"),
    
    JA("JA"),
    
    KO("KO"),
    
    PT_BR("PT_BR"),
    
    ZH_CN("ZH_CN"),
    
    ZH_TW("ZH_TW");

    private String value;

    LocaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocaleEnum fromValue(String value) {
      for (LocaleEnum b : LocaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  @javax.annotation.Nullable
  private LocaleEnum locale;

  public static final String SERIALIZED_NAME_POLICY_DOCUMENT = "policyDocument";
  @SerializedName(SERIALIZED_NAME_POLICY_DOCUMENT)
  @javax.annotation.Nonnull
  private String policyDocument;

  /**
   * &lt;p&gt;The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.&lt;/p&gt; &lt;p&gt;Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. &lt;/p&gt;
   */
  @JsonAdapter(PolicyTypeEnum.Adapter.class)
  public enum PolicyTypeEnum {
    IDENTITY_POLICY("IDENTITY_POLICY"),
    
    RESOURCE_POLICY("RESOURCE_POLICY"),
    
    SERVICE_CONTROL_POLICY("SERVICE_CONTROL_POLICY");

    private String value;

    PolicyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyTypeEnum fromValue(String value) {
      for (PolicyTypeEnum b : PolicyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY_TYPE = "policyType";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE)
  @javax.annotation.Nonnull
  private PolicyTypeEnum policyType;

  /**
   * &lt;p&gt;The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is &lt;code&gt;RESOURCE_POLICY&lt;/code&gt;. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose &lt;code&gt;AWS::S3::Bucket&lt;/code&gt; for the policy validation resource type.&lt;/p&gt; &lt;p&gt;For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.&lt;/p&gt;
   */
  @JsonAdapter(ValidatePolicyResourceTypeEnum.Adapter.class)
  public enum ValidatePolicyResourceTypeEnum {
    S3_BUCKET("AWS::S3::Bucket"),
    
    S3_ACCESS_POINT("AWS::S3::AccessPoint"),
    
    S3_MULTI_REGION_ACCESS_POINT("AWS::S3::MultiRegionAccessPoint"),
    
    S3_OBJECT_LAMBDA_ACCESS_POINT("AWS::S3ObjectLambda::AccessPoint"),
    
    IAM_ASSUME_ROLE_POLICY_DOCUMENT("AWS::IAM::AssumeRolePolicyDocument");

    private String value;

    ValidatePolicyResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidatePolicyResourceTypeEnum fromValue(String value) {
      for (ValidatePolicyResourceTypeEnum b : ValidatePolicyResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidatePolicyResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidatePolicyResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidatePolicyResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidatePolicyResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidatePolicyResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALIDATE_POLICY_RESOURCE_TYPE = "validatePolicyResourceType";
  @SerializedName(SERIALIZED_NAME_VALIDATE_POLICY_RESOURCE_TYPE)
  @javax.annotation.Nullable
  private ValidatePolicyResourceTypeEnum validatePolicyResourceType;

  public ValidatePolicyRequest() {
  }

  public ValidatePolicyRequest locale(@javax.annotation.Nullable LocaleEnum locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The locale to use for localizing the findings.
   * @return locale
   */
  @javax.annotation.Nullable
  public LocaleEnum getLocale() {
    return locale;
  }

  public void setLocale(@javax.annotation.Nullable LocaleEnum locale) {
    this.locale = locale;
  }


  public ValidatePolicyRequest policyDocument(@javax.annotation.Nonnull String policyDocument) {
    this.policyDocument = policyDocument;
    return this;
  }

  /**
   * The JSON policy document to use as the content for the policy.
   * @return policyDocument
   */
  @javax.annotation.Nonnull
  public String getPolicyDocument() {
    return policyDocument;
  }

  public void setPolicyDocument(@javax.annotation.Nonnull String policyDocument) {
    this.policyDocument = policyDocument;
  }


  public ValidatePolicyRequest policyType(@javax.annotation.Nonnull PolicyTypeEnum policyType) {
    this.policyType = policyType;
    return this;
  }

  /**
   * &lt;p&gt;The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.&lt;/p&gt; &lt;p&gt;Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. &lt;/p&gt;
   * @return policyType
   */
  @javax.annotation.Nonnull
  public PolicyTypeEnum getPolicyType() {
    return policyType;
  }

  public void setPolicyType(@javax.annotation.Nonnull PolicyTypeEnum policyType) {
    this.policyType = policyType;
  }


  public ValidatePolicyRequest validatePolicyResourceType(@javax.annotation.Nullable ValidatePolicyResourceTypeEnum validatePolicyResourceType) {
    this.validatePolicyResourceType = validatePolicyResourceType;
    return this;
  }

  /**
   * &lt;p&gt;The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is &lt;code&gt;RESOURCE_POLICY&lt;/code&gt;. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose &lt;code&gt;AWS::S3::Bucket&lt;/code&gt; for the policy validation resource type.&lt;/p&gt; &lt;p&gt;For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.&lt;/p&gt;
   * @return validatePolicyResourceType
   */
  @javax.annotation.Nullable
  public ValidatePolicyResourceTypeEnum getValidatePolicyResourceType() {
    return validatePolicyResourceType;
  }

  public void setValidatePolicyResourceType(@javax.annotation.Nullable ValidatePolicyResourceTypeEnum validatePolicyResourceType) {
    this.validatePolicyResourceType = validatePolicyResourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatePolicyRequest validatePolicyRequest = (ValidatePolicyRequest) o;
    return Objects.equals(this.locale, validatePolicyRequest.locale) &&
        Objects.equals(this.policyDocument, validatePolicyRequest.policyDocument) &&
        Objects.equals(this.policyType, validatePolicyRequest.policyType) &&
        Objects.equals(this.validatePolicyResourceType, validatePolicyRequest.validatePolicyResourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locale, policyDocument, policyType, validatePolicyResourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatePolicyRequest {\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    policyDocument: ").append(toIndentedString(policyDocument)).append("\n");
    sb.append("    policyType: ").append(toIndentedString(policyType)).append("\n");
    sb.append("    validatePolicyResourceType: ").append(toIndentedString(validatePolicyResourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locale");
    openapiFields.add("policyDocument");
    openapiFields.add("policyType");
    openapiFields.add("validatePolicyResourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyDocument");
    openapiRequiredFields.add("policyType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidatePolicyRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidatePolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidatePolicyRequest is not found in the empty JSON string", ValidatePolicyRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidatePolicyRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidatePolicyRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidatePolicyRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        LocaleEnum.validateJsonElement(jsonObj.get("locale"));
      }
      if (!jsonObj.get("policyDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDocument").toString()));
      }
      if (!jsonObj.get("policyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyType").toString()));
      }
      // validate the required field `policyType`
      PolicyTypeEnum.validateJsonElement(jsonObj.get("policyType"));
      if ((jsonObj.get("validatePolicyResourceType") != null && !jsonObj.get("validatePolicyResourceType").isJsonNull()) && !jsonObj.get("validatePolicyResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validatePolicyResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validatePolicyResourceType").toString()));
      }
      // validate the optional field `validatePolicyResourceType`
      if (jsonObj.get("validatePolicyResourceType") != null && !jsonObj.get("validatePolicyResourceType").isJsonNull()) {
        ValidatePolicyResourceTypeEnum.validateJsonElement(jsonObj.get("validatePolicyResourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidatePolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidatePolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidatePolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidatePolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidatePolicyRequest>() {
           @Override
           public void write(JsonWriter out, ValidatePolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidatePolicyRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidatePolicyRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidatePolicyRequest
   * @throws IOException if the JSON string is invalid with respect to ValidatePolicyRequest
   */
  public static ValidatePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidatePolicyRequest.class);
  }

  /**
   * Convert an instance of ValidatePolicyRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

