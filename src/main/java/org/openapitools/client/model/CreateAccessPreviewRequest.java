/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ModelConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAccessPreviewRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class CreateAccessPreviewRequest {
  public static final String SERIALIZED_NAME_ANALYZER_ARN = "analyzerArn";
  @SerializedName(SERIALIZED_NAME_ANALYZER_ARN)
  @javax.annotation.Nonnull
  private String analyzerArn;

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  @javax.annotation.Nonnull
  private Map<String, ModelConfiguration> configurations = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  @javax.annotation.Nullable
  private String clientToken;

  public CreateAccessPreviewRequest() {
  }

  public CreateAccessPreviewRequest analyzerArn(@javax.annotation.Nonnull String analyzerArn) {
    this.analyzerArn = analyzerArn;
    return this;
  }

  /**
   * The &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-getting-started.html#permission-resources\&quot;&gt;ARN of the account analyzer&lt;/a&gt; used to generate the access preview. You can only create an access preview for analyzers with an &lt;code&gt;Account&lt;/code&gt; type and &lt;code&gt;Active&lt;/code&gt; status.
   * @return analyzerArn
   */
  @javax.annotation.Nonnull
  public String getAnalyzerArn() {
    return analyzerArn;
  }

  public void setAnalyzerArn(@javax.annotation.Nonnull String analyzerArn) {
    this.analyzerArn = analyzerArn;
  }


  public CreateAccessPreviewRequest configurations(@javax.annotation.Nonnull Map<String, ModelConfiguration> configurations) {
    this.configurations = configurations;
    return this;
  }

  public CreateAccessPreviewRequest putConfigurationsItem(String key, ModelConfiguration configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new HashMap<>();
    }
    this.configurations.put(key, configurationsItem);
    return this;
  }

  /**
   * Access control configuration for your resource that is used to generate the access preview. The access preview includes findings for external access allowed to the resource with the proposed access control configuration. The configuration must contain exactly one element.
   * @return configurations
   */
  @javax.annotation.Nonnull
  public Map<String, ModelConfiguration> getConfigurations() {
    return configurations;
  }

  public void setConfigurations(@javax.annotation.Nonnull Map<String, ModelConfiguration> configurations) {
    this.configurations = configurations;
  }


  public CreateAccessPreviewRequest clientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A client token.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(@javax.annotation.Nullable String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAccessPreviewRequest createAccessPreviewRequest = (CreateAccessPreviewRequest) o;
    return Objects.equals(this.analyzerArn, createAccessPreviewRequest.analyzerArn) &&
        Objects.equals(this.configurations, createAccessPreviewRequest.configurations) &&
        Objects.equals(this.clientToken, createAccessPreviewRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzerArn, configurations, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAccessPreviewRequest {\n");
    sb.append("    analyzerArn: ").append(toIndentedString(analyzerArn)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("analyzerArn");
    openapiFields.add("configurations");
    openapiFields.add("clientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("analyzerArn");
    openapiRequiredFields.add("configurations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAccessPreviewRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAccessPreviewRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAccessPreviewRequest is not found in the empty JSON string", CreateAccessPreviewRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAccessPreviewRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAccessPreviewRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAccessPreviewRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("analyzerArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzerArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzerArn").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAccessPreviewRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAccessPreviewRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAccessPreviewRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAccessPreviewRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAccessPreviewRequest>() {
           @Override
           public void write(JsonWriter out, CreateAccessPreviewRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAccessPreviewRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAccessPreviewRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAccessPreviewRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAccessPreviewRequest
   */
  public static CreateAccessPreviewRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAccessPreviewRequest.class);
  }

  /**
   * Convert an instance of CreateAccessPreviewRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

