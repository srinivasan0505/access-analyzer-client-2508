/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ValidatePolicyFindingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A finding in a policy. Each finding is an actionable recommendation that can be used to improve the policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ValidatePolicyFinding {
  public static final String SERIALIZED_NAME_FINDING_DETAILS = "findingDetails";
  @SerializedName(SERIALIZED_NAME_FINDING_DETAILS)
  @javax.annotation.Nonnull
  private String findingDetails;

  public static final String SERIALIZED_NAME_FINDING_TYPE = "findingType";
  @SerializedName(SERIALIZED_NAME_FINDING_TYPE)
  @javax.annotation.Nonnull
  private ValidatePolicyFindingType findingType;

  public static final String SERIALIZED_NAME_ISSUE_CODE = "issueCode";
  @SerializedName(SERIALIZED_NAME_ISSUE_CODE)
  @javax.annotation.Nonnull
  private String issueCode;

  public static final String SERIALIZED_NAME_LEARN_MORE_LINK = "learnMoreLink";
  @SerializedName(SERIALIZED_NAME_LEARN_MORE_LINK)
  @javax.annotation.Nonnull
  private String learnMoreLink;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  @javax.annotation.Nonnull
  private List locations;

  public ValidatePolicyFinding() {
  }

  public ValidatePolicyFinding findingDetails(@javax.annotation.Nonnull String findingDetails) {
    this.findingDetails = findingDetails;
    return this;
  }

  /**
   * Get findingDetails
   * @return findingDetails
   */
  @javax.annotation.Nonnull
  public String getFindingDetails() {
    return findingDetails;
  }

  public void setFindingDetails(@javax.annotation.Nonnull String findingDetails) {
    this.findingDetails = findingDetails;
  }


  public ValidatePolicyFinding findingType(@javax.annotation.Nonnull ValidatePolicyFindingType findingType) {
    this.findingType = findingType;
    return this;
  }

  /**
   * Get findingType
   * @return findingType
   */
  @javax.annotation.Nonnull
  public ValidatePolicyFindingType getFindingType() {
    return findingType;
  }

  public void setFindingType(@javax.annotation.Nonnull ValidatePolicyFindingType findingType) {
    this.findingType = findingType;
  }


  public ValidatePolicyFinding issueCode(@javax.annotation.Nonnull String issueCode) {
    this.issueCode = issueCode;
    return this;
  }

  /**
   * Get issueCode
   * @return issueCode
   */
  @javax.annotation.Nonnull
  public String getIssueCode() {
    return issueCode;
  }

  public void setIssueCode(@javax.annotation.Nonnull String issueCode) {
    this.issueCode = issueCode;
  }


  public ValidatePolicyFinding learnMoreLink(@javax.annotation.Nonnull String learnMoreLink) {
    this.learnMoreLink = learnMoreLink;
    return this;
  }

  /**
   * Get learnMoreLink
   * @return learnMoreLink
   */
  @javax.annotation.Nonnull
  public String getLearnMoreLink() {
    return learnMoreLink;
  }

  public void setLearnMoreLink(@javax.annotation.Nonnull String learnMoreLink) {
    this.learnMoreLink = learnMoreLink;
  }


  public ValidatePolicyFinding locations(@javax.annotation.Nonnull List locations) {
    this.locations = locations;
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nonnull
  public List getLocations() {
    return locations;
  }

  public void setLocations(@javax.annotation.Nonnull List locations) {
    this.locations = locations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatePolicyFinding validatePolicyFinding = (ValidatePolicyFinding) o;
    return Objects.equals(this.findingDetails, validatePolicyFinding.findingDetails) &&
        Objects.equals(this.findingType, validatePolicyFinding.findingType) &&
        Objects.equals(this.issueCode, validatePolicyFinding.issueCode) &&
        Objects.equals(this.learnMoreLink, validatePolicyFinding.learnMoreLink) &&
        Objects.equals(this.locations, validatePolicyFinding.locations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(findingDetails, findingType, issueCode, learnMoreLink, locations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatePolicyFinding {\n");
    sb.append("    findingDetails: ").append(toIndentedString(findingDetails)).append("\n");
    sb.append("    findingType: ").append(toIndentedString(findingType)).append("\n");
    sb.append("    issueCode: ").append(toIndentedString(issueCode)).append("\n");
    sb.append("    learnMoreLink: ").append(toIndentedString(learnMoreLink)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("findingDetails");
    openapiFields.add("findingType");
    openapiFields.add("issueCode");
    openapiFields.add("learnMoreLink");
    openapiFields.add("locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("findingDetails");
    openapiRequiredFields.add("findingType");
    openapiRequiredFields.add("issueCode");
    openapiRequiredFields.add("learnMoreLink");
    openapiRequiredFields.add("locations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidatePolicyFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidatePolicyFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidatePolicyFinding is not found in the empty JSON string", ValidatePolicyFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidatePolicyFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidatePolicyFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidatePolicyFinding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `findingDetails`
      String.validateJsonElement(jsonObj.get("findingDetails"));
      // validate the required field `findingType`
      ValidatePolicyFindingType.validateJsonElement(jsonObj.get("findingType"));
      // validate the required field `issueCode`
      String.validateJsonElement(jsonObj.get("issueCode"));
      // validate the required field `learnMoreLink`
      String.validateJsonElement(jsonObj.get("learnMoreLink"));
      // validate the required field `locations`
      List.validateJsonElement(jsonObj.get("locations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidatePolicyFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidatePolicyFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidatePolicyFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidatePolicyFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidatePolicyFinding>() {
           @Override
           public void write(JsonWriter out, ValidatePolicyFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidatePolicyFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidatePolicyFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidatePolicyFinding
   * @throws IOException if the JSON string is invalid with respect to ValidatePolicyFinding
   */
  public static ValidatePolicyFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidatePolicyFinding.class);
  }

  /**
   * Convert an instance of ValidatePolicyFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

