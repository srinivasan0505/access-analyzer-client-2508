/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.S3BucketConfigurationBucketPublicAccessBlock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationS3Bucket
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class ConfigurationS3Bucket {
  public static final String SERIALIZED_NAME_BUCKET_POLICY = "bucketPolicy";
  @SerializedName(SERIALIZED_NAME_BUCKET_POLICY)
  @javax.annotation.Nullable
  private String bucketPolicy;

  public static final String SERIALIZED_NAME_BUCKET_ACL_GRANTS = "bucketAclGrants";
  @SerializedName(SERIALIZED_NAME_BUCKET_ACL_GRANTS)
  @javax.annotation.Nullable
  private List bucketAclGrants;

  public static final String SERIALIZED_NAME_BUCKET_PUBLIC_ACCESS_BLOCK = "bucketPublicAccessBlock";
  @SerializedName(SERIALIZED_NAME_BUCKET_PUBLIC_ACCESS_BLOCK)
  @javax.annotation.Nullable
  private S3BucketConfigurationBucketPublicAccessBlock bucketPublicAccessBlock;

  public static final String SERIALIZED_NAME_ACCESS_POINTS = "accessPoints";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINTS)
  @javax.annotation.Nullable
  private Map accessPoints;

  public ConfigurationS3Bucket() {
  }

  public ConfigurationS3Bucket bucketPolicy(@javax.annotation.Nullable String bucketPolicy) {
    this.bucketPolicy = bucketPolicy;
    return this;
  }

  /**
   * Get bucketPolicy
   * @return bucketPolicy
   */
  @javax.annotation.Nullable
  public String getBucketPolicy() {
    return bucketPolicy;
  }

  public void setBucketPolicy(@javax.annotation.Nullable String bucketPolicy) {
    this.bucketPolicy = bucketPolicy;
  }


  public ConfigurationS3Bucket bucketAclGrants(@javax.annotation.Nullable List bucketAclGrants) {
    this.bucketAclGrants = bucketAclGrants;
    return this;
  }

  /**
   * Get bucketAclGrants
   * @return bucketAclGrants
   */
  @javax.annotation.Nullable
  public List getBucketAclGrants() {
    return bucketAclGrants;
  }

  public void setBucketAclGrants(@javax.annotation.Nullable List bucketAclGrants) {
    this.bucketAclGrants = bucketAclGrants;
  }


  public ConfigurationS3Bucket bucketPublicAccessBlock(@javax.annotation.Nullable S3BucketConfigurationBucketPublicAccessBlock bucketPublicAccessBlock) {
    this.bucketPublicAccessBlock = bucketPublicAccessBlock;
    return this;
  }

  /**
   * Get bucketPublicAccessBlock
   * @return bucketPublicAccessBlock
   */
  @javax.annotation.Nullable
  public S3BucketConfigurationBucketPublicAccessBlock getBucketPublicAccessBlock() {
    return bucketPublicAccessBlock;
  }

  public void setBucketPublicAccessBlock(@javax.annotation.Nullable S3BucketConfigurationBucketPublicAccessBlock bucketPublicAccessBlock) {
    this.bucketPublicAccessBlock = bucketPublicAccessBlock;
  }


  public ConfigurationS3Bucket accessPoints(@javax.annotation.Nullable Map accessPoints) {
    this.accessPoints = accessPoints;
    return this;
  }

  /**
   * Get accessPoints
   * @return accessPoints
   */
  @javax.annotation.Nullable
  public Map getAccessPoints() {
    return accessPoints;
  }

  public void setAccessPoints(@javax.annotation.Nullable Map accessPoints) {
    this.accessPoints = accessPoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationS3Bucket configurationS3Bucket = (ConfigurationS3Bucket) o;
    return Objects.equals(this.bucketPolicy, configurationS3Bucket.bucketPolicy) &&
        Objects.equals(this.bucketAclGrants, configurationS3Bucket.bucketAclGrants) &&
        Objects.equals(this.bucketPublicAccessBlock, configurationS3Bucket.bucketPublicAccessBlock) &&
        Objects.equals(this.accessPoints, configurationS3Bucket.accessPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketPolicy, bucketAclGrants, bucketPublicAccessBlock, accessPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationS3Bucket {\n");
    sb.append("    bucketPolicy: ").append(toIndentedString(bucketPolicy)).append("\n");
    sb.append("    bucketAclGrants: ").append(toIndentedString(bucketAclGrants)).append("\n");
    sb.append("    bucketPublicAccessBlock: ").append(toIndentedString(bucketPublicAccessBlock)).append("\n");
    sb.append("    accessPoints: ").append(toIndentedString(accessPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketPolicy");
    openapiFields.add("bucketAclGrants");
    openapiFields.add("bucketPublicAccessBlock");
    openapiFields.add("accessPoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationS3Bucket
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationS3Bucket.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationS3Bucket is not found in the empty JSON string", ConfigurationS3Bucket.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationS3Bucket.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationS3Bucket` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bucketPolicy`
      if (jsonObj.get("bucketPolicy") != null && !jsonObj.get("bucketPolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bucketPolicy"));
      }
      // validate the optional field `bucketAclGrants`
      if (jsonObj.get("bucketAclGrants") != null && !jsonObj.get("bucketAclGrants").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("bucketAclGrants"));
      }
      // validate the optional field `bucketPublicAccessBlock`
      if (jsonObj.get("bucketPublicAccessBlock") != null && !jsonObj.get("bucketPublicAccessBlock").isJsonNull()) {
        S3BucketConfigurationBucketPublicAccessBlock.validateJsonElement(jsonObj.get("bucketPublicAccessBlock"));
      }
      // validate the optional field `accessPoints`
      if (jsonObj.get("accessPoints") != null && !jsonObj.get("accessPoints").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("accessPoints"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationS3Bucket.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationS3Bucket' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationS3Bucket> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationS3Bucket.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationS3Bucket>() {
           @Override
           public void write(JsonWriter out, ConfigurationS3Bucket value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationS3Bucket read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationS3Bucket given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationS3Bucket
   * @throws IOException if the JSON string is invalid with respect to ConfigurationS3Bucket
   */
  public static ConfigurationS3Bucket fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationS3Bucket.class);
  }

  /**
   * Convert an instance of ConfigurationS3Bucket to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

