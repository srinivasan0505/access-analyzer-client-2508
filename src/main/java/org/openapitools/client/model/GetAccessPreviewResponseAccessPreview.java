/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.AccessPreviewStatus;
import org.openapitools.client.model.AccessPreviewStatusReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAccessPreviewResponseAccessPreview
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class GetAccessPreviewResponseAccessPreview {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_ANALYZER_ARN = "analyzerArn";
  @SerializedName(SERIALIZED_NAME_ANALYZER_ARN)
  @javax.annotation.Nonnull
  private String analyzerArn;

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  @javax.annotation.Nonnull
  private Map configurations;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private AccessPreviewStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  @javax.annotation.Nullable
  private AccessPreviewStatusReason statusReason;

  public GetAccessPreviewResponseAccessPreview() {
  }

  public GetAccessPreviewResponseAccessPreview id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public GetAccessPreviewResponseAccessPreview analyzerArn(@javax.annotation.Nonnull String analyzerArn) {
    this.analyzerArn = analyzerArn;
    return this;
  }

  /**
   * Get analyzerArn
   * @return analyzerArn
   */
  @javax.annotation.Nonnull
  public String getAnalyzerArn() {
    return analyzerArn;
  }

  public void setAnalyzerArn(@javax.annotation.Nonnull String analyzerArn) {
    this.analyzerArn = analyzerArn;
  }


  public GetAccessPreviewResponseAccessPreview configurations(@javax.annotation.Nonnull Map configurations) {
    this.configurations = configurations;
    return this;
  }

  /**
   * Get configurations
   * @return configurations
   */
  @javax.annotation.Nonnull
  public Map getConfigurations() {
    return configurations;
  }

  public void setConfigurations(@javax.annotation.Nonnull Map configurations) {
    this.configurations = configurations;
  }


  public GetAccessPreviewResponseAccessPreview createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetAccessPreviewResponseAccessPreview status(@javax.annotation.Nonnull AccessPreviewStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public AccessPreviewStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull AccessPreviewStatus status) {
    this.status = status;
  }


  public GetAccessPreviewResponseAccessPreview statusReason(@javax.annotation.Nullable AccessPreviewStatusReason statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public AccessPreviewStatusReason getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(@javax.annotation.Nullable AccessPreviewStatusReason statusReason) {
    this.statusReason = statusReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccessPreviewResponseAccessPreview getAccessPreviewResponseAccessPreview = (GetAccessPreviewResponseAccessPreview) o;
    return Objects.equals(this.id, getAccessPreviewResponseAccessPreview.id) &&
        Objects.equals(this.analyzerArn, getAccessPreviewResponseAccessPreview.analyzerArn) &&
        Objects.equals(this.configurations, getAccessPreviewResponseAccessPreview.configurations) &&
        Objects.equals(this.createdAt, getAccessPreviewResponseAccessPreview.createdAt) &&
        Objects.equals(this.status, getAccessPreviewResponseAccessPreview.status) &&
        Objects.equals(this.statusReason, getAccessPreviewResponseAccessPreview.statusReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, analyzerArn, configurations, createdAt, status, statusReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccessPreviewResponseAccessPreview {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    analyzerArn: ").append(toIndentedString(analyzerArn)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("analyzerArn");
    openapiFields.add("configurations");
    openapiFields.add("createdAt");
    openapiFields.add("status");
    openapiFields.add("statusReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("analyzerArn");
    openapiRequiredFields.add("configurations");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAccessPreviewResponseAccessPreview
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAccessPreviewResponseAccessPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAccessPreviewResponseAccessPreview is not found in the empty JSON string", GetAccessPreviewResponseAccessPreview.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAccessPreviewResponseAccessPreview.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAccessPreviewResponseAccessPreview` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAccessPreviewResponseAccessPreview.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `analyzerArn`
      String.validateJsonElement(jsonObj.get("analyzerArn"));
      // validate the required field `configurations`
      Map.validateJsonElement(jsonObj.get("configurations"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `status`
      AccessPreviewStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `statusReason`
      if (jsonObj.get("statusReason") != null && !jsonObj.get("statusReason").isJsonNull()) {
        AccessPreviewStatusReason.validateJsonElement(jsonObj.get("statusReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAccessPreviewResponseAccessPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAccessPreviewResponseAccessPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAccessPreviewResponseAccessPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAccessPreviewResponseAccessPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAccessPreviewResponseAccessPreview>() {
           @Override
           public void write(JsonWriter out, GetAccessPreviewResponseAccessPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAccessPreviewResponseAccessPreview read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAccessPreviewResponseAccessPreview given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAccessPreviewResponseAccessPreview
   * @throws IOException if the JSON string is invalid with respect to GetAccessPreviewResponseAccessPreview
   */
  public static GetAccessPreviewResponseAccessPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAccessPreviewResponseAccessPreview.class);
  }

  /**
   * Convert an instance of GetAccessPreviewResponseAccessPreview to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

