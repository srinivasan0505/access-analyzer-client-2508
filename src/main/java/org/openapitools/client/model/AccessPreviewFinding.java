/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FindingChangeType;
import org.openapitools.client.model.FindingStatus;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An access preview finding generated by the access preview.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T13:03:05.234024+05:30[Asia/Kolkata]", comments = "Generator version: 7.10.0")
public class AccessPreviewFinding {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_EXISTING_FINDING_ID = "existingFindingId";
  @SerializedName(SERIALIZED_NAME_EXISTING_FINDING_ID)
  @javax.annotation.Nullable
  private String existingFindingId;

  public static final String SERIALIZED_NAME_EXISTING_FINDING_STATUS = "existingFindingStatus";
  @SerializedName(SERIALIZED_NAME_EXISTING_FINDING_STATUS)
  @javax.annotation.Nullable
  private FindingStatus existingFindingStatus;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  @javax.annotation.Nullable
  private Map principal;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  @javax.annotation.Nullable
  private List action;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  @javax.annotation.Nullable
  private Map condition;

  public static final String SERIALIZED_NAME_RESOURCE = "resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  @javax.annotation.Nullable
  private String resource;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  @javax.annotation.Nullable
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  @javax.annotation.Nonnull
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  @javax.annotation.Nonnull
  private FindingChangeType changeType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private FindingStatus status;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_ACCOUNT = "resourceOwnerAccount";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_ACCOUNT)
  @javax.annotation.Nonnull
  private String resourceOwnerAccount;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  @javax.annotation.Nullable
  private String error;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  @javax.annotation.Nullable
  private List sources;

  public AccessPreviewFinding() {
  }

  public AccessPreviewFinding id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public AccessPreviewFinding existingFindingId(@javax.annotation.Nullable String existingFindingId) {
    this.existingFindingId = existingFindingId;
    return this;
  }

  /**
   * Get existingFindingId
   * @return existingFindingId
   */
  @javax.annotation.Nullable
  public String getExistingFindingId() {
    return existingFindingId;
  }

  public void setExistingFindingId(@javax.annotation.Nullable String existingFindingId) {
    this.existingFindingId = existingFindingId;
  }


  public AccessPreviewFinding existingFindingStatus(@javax.annotation.Nullable FindingStatus existingFindingStatus) {
    this.existingFindingStatus = existingFindingStatus;
    return this;
  }

  /**
   * Get existingFindingStatus
   * @return existingFindingStatus
   */
  @javax.annotation.Nullable
  public FindingStatus getExistingFindingStatus() {
    return existingFindingStatus;
  }

  public void setExistingFindingStatus(@javax.annotation.Nullable FindingStatus existingFindingStatus) {
    this.existingFindingStatus = existingFindingStatus;
  }


  public AccessPreviewFinding principal(@javax.annotation.Nullable Map principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public Map getPrincipal() {
    return principal;
  }

  public void setPrincipal(@javax.annotation.Nullable Map principal) {
    this.principal = principal;
  }


  public AccessPreviewFinding action(@javax.annotation.Nullable List action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public List getAction() {
    return action;
  }

  public void setAction(@javax.annotation.Nullable List action) {
    this.action = action;
  }


  public AccessPreviewFinding condition(@javax.annotation.Nullable Map condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public Map getCondition() {
    return condition;
  }

  public void setCondition(@javax.annotation.Nullable Map condition) {
    this.condition = condition;
  }


  public AccessPreviewFinding resource(@javax.annotation.Nullable String resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public String getResource() {
    return resource;
  }

  public void setResource(@javax.annotation.Nullable String resource) {
    this.resource = resource;
  }


  public AccessPreviewFinding isPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Get isPublic
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public AccessPreviewFinding resourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(@javax.annotation.Nonnull ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public AccessPreviewFinding createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AccessPreviewFinding changeType(@javax.annotation.Nonnull FindingChangeType changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Get changeType
   * @return changeType
   */
  @javax.annotation.Nonnull
  public FindingChangeType getChangeType() {
    return changeType;
  }

  public void setChangeType(@javax.annotation.Nonnull FindingChangeType changeType) {
    this.changeType = changeType;
  }


  public AccessPreviewFinding status(@javax.annotation.Nonnull FindingStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public FindingStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull FindingStatus status) {
    this.status = status;
  }


  public AccessPreviewFinding resourceOwnerAccount(@javax.annotation.Nonnull String resourceOwnerAccount) {
    this.resourceOwnerAccount = resourceOwnerAccount;
    return this;
  }

  /**
   * Get resourceOwnerAccount
   * @return resourceOwnerAccount
   */
  @javax.annotation.Nonnull
  public String getResourceOwnerAccount() {
    return resourceOwnerAccount;
  }

  public void setResourceOwnerAccount(@javax.annotation.Nonnull String resourceOwnerAccount) {
    this.resourceOwnerAccount = resourceOwnerAccount;
  }


  public AccessPreviewFinding error(@javax.annotation.Nullable String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(@javax.annotation.Nullable String error) {
    this.error = error;
  }


  public AccessPreviewFinding sources(@javax.annotation.Nullable List sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List getSources() {
    return sources;
  }

  public void setSources(@javax.annotation.Nullable List sources) {
    this.sources = sources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessPreviewFinding accessPreviewFinding = (AccessPreviewFinding) o;
    return Objects.equals(this.id, accessPreviewFinding.id) &&
        Objects.equals(this.existingFindingId, accessPreviewFinding.existingFindingId) &&
        Objects.equals(this.existingFindingStatus, accessPreviewFinding.existingFindingStatus) &&
        Objects.equals(this.principal, accessPreviewFinding.principal) &&
        Objects.equals(this.action, accessPreviewFinding.action) &&
        Objects.equals(this.condition, accessPreviewFinding.condition) &&
        Objects.equals(this.resource, accessPreviewFinding.resource) &&
        Objects.equals(this.isPublic, accessPreviewFinding.isPublic) &&
        Objects.equals(this.resourceType, accessPreviewFinding.resourceType) &&
        Objects.equals(this.createdAt, accessPreviewFinding.createdAt) &&
        Objects.equals(this.changeType, accessPreviewFinding.changeType) &&
        Objects.equals(this.status, accessPreviewFinding.status) &&
        Objects.equals(this.resourceOwnerAccount, accessPreviewFinding.resourceOwnerAccount) &&
        Objects.equals(this.error, accessPreviewFinding.error) &&
        Objects.equals(this.sources, accessPreviewFinding.sources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, existingFindingId, existingFindingStatus, principal, action, condition, resource, isPublic, resourceType, createdAt, changeType, status, resourceOwnerAccount, error, sources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessPreviewFinding {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    existingFindingId: ").append(toIndentedString(existingFindingId)).append("\n");
    sb.append("    existingFindingStatus: ").append(toIndentedString(existingFindingStatus)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resourceOwnerAccount: ").append(toIndentedString(resourceOwnerAccount)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("existingFindingId");
    openapiFields.add("existingFindingStatus");
    openapiFields.add("principal");
    openapiFields.add("action");
    openapiFields.add("condition");
    openapiFields.add("resource");
    openapiFields.add("isPublic");
    openapiFields.add("resourceType");
    openapiFields.add("createdAt");
    openapiFields.add("changeType");
    openapiFields.add("status");
    openapiFields.add("resourceOwnerAccount");
    openapiFields.add("error");
    openapiFields.add("sources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("changeType");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("resourceOwnerAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessPreviewFinding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessPreviewFinding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessPreviewFinding is not found in the empty JSON string", AccessPreviewFinding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessPreviewFinding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessPreviewFinding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessPreviewFinding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `existingFindingId`
      if (jsonObj.get("existingFindingId") != null && !jsonObj.get("existingFindingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("existingFindingId"));
      }
      // validate the optional field `existingFindingStatus`
      if (jsonObj.get("existingFindingStatus") != null && !jsonObj.get("existingFindingStatus").isJsonNull()) {
        FindingStatus.validateJsonElement(jsonObj.get("existingFindingStatus"));
      }
      // validate the optional field `principal`
      if (jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("principal"));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("condition"));
      }
      // validate the optional field `resource`
      if (jsonObj.get("resource") != null && !jsonObj.get("resource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resource"));
      }
      // validate the optional field `isPublic`
      if (jsonObj.get("isPublic") != null && !jsonObj.get("isPublic").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isPublic"));
      }
      // validate the required field `resourceType`
      ResourceType.validateJsonElement(jsonObj.get("resourceType"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `changeType`
      FindingChangeType.validateJsonElement(jsonObj.get("changeType"));
      // validate the required field `status`
      FindingStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `resourceOwnerAccount`
      String.validateJsonElement(jsonObj.get("resourceOwnerAccount"));
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `sources`
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("sources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessPreviewFinding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessPreviewFinding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessPreviewFinding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessPreviewFinding.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessPreviewFinding>() {
           @Override
           public void write(JsonWriter out, AccessPreviewFinding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessPreviewFinding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessPreviewFinding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessPreviewFinding
   * @throws IOException if the JSON string is invalid with respect to AccessPreviewFinding
   */
  public static AccessPreviewFinding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessPreviewFinding.class);
  }

  /**
   * Convert an instance of AccessPreviewFinding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

