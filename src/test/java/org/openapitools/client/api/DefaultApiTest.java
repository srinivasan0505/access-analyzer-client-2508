/*
 * Access Analyzer
 * <p>Identity and Access Management Access Analyzer helps identify potential resource-access risks by enabling you to identify any policies that grant access to an external principal. It does this by using logic-based reasoning to analyze resource-based policies in your Amazon Web Services environment. An external principal can be another Amazon Web Services account, a root user, an IAM user or role, a federated user, an Amazon Web Services service, or an anonymous user. You can also use IAM Access Analyzer to preview and validate public and cross-account access to your resources before deploying permissions changes. This guide describes the Identity and Access Management Access Analyzer operations that you can call programmatically. For general information about IAM Access Analyzer, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/what-is-access-analyzer.html\">Identity and Access Management Access Analyzer</a> in the <b>IAM User Guide</b>.</p> <p>To start using IAM Access Analyzer, you first need to create an analyzer.</p>
 *
 * The version of the OpenAPI document: 2019-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplyArchiveRuleRequest;
import org.openapitools.client.model.CreateAccessPreviewRequest;
import org.openapitools.client.model.CreateAccessPreviewResponse;
import org.openapitools.client.model.CreateAnalyzerRequest;
import org.openapitools.client.model.CreateAnalyzerResponse;
import org.openapitools.client.model.CreateArchiveRuleRequest;
import org.openapitools.client.model.GetAccessPreviewResponse;
import org.openapitools.client.model.GetAnalyzedResourceResponse;
import org.openapitools.client.model.GetAnalyzerResponse;
import org.openapitools.client.model.GetArchiveRuleResponse;
import org.openapitools.client.model.GetFindingResponse;
import org.openapitools.client.model.GetGeneratedPolicyResponse;
import org.openapitools.client.model.ListAccessPreviewFindingsRequest;
import org.openapitools.client.model.ListAccessPreviewFindingsResponse;
import org.openapitools.client.model.ListAccessPreviewsResponse;
import org.openapitools.client.model.ListAnalyzedResourcesRequest;
import org.openapitools.client.model.ListAnalyzedResourcesResponse;
import org.openapitools.client.model.ListAnalyzersResponse;
import org.openapitools.client.model.ListArchiveRulesResponse;
import org.openapitools.client.model.ListFindingsRequest;
import org.openapitools.client.model.ListFindingsResponse;
import org.openapitools.client.model.ListPolicyGenerationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.StartPolicyGenerationRequest;
import org.openapitools.client.model.StartPolicyGenerationResponse;
import org.openapitools.client.model.StartResourceScanRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateArchiveRuleRequest;
import org.openapitools.client.model.UpdateFindingsRequest;
import org.openapitools.client.model.ValidatePolicyRequest;
import org.openapitools.client.model.ValidatePolicyResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Retroactively applies the archive rule to existing findings that meet the archive rule criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyArchiveRuleTest() throws ApiException {
        ApplyArchiveRuleRequest applyArchiveRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.applyArchiveRule(applyArchiveRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the requested policy generation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelPolicyGenerationTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelPolicyGeneration(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an access preview that allows you to preview IAM Access Analyzer findings for your resource before deploying resource permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessPreviewTest() throws ApiException {
        CreateAccessPreviewRequest createAccessPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAccessPreviewResponse response = api.createAccessPreview(createAccessPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an analyzer for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnalyzerTest() throws ApiException {
        CreateAnalyzerRequest createAnalyzerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnalyzerResponse response = api.createAnalyzer(createAnalyzerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an archive rule for the specified analyzer. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.&lt;/p&gt; &lt;p&gt;To learn about filter keys that you can use to create an archive rule, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html\&quot;&gt;IAM Access Analyzer filter keys&lt;/a&gt; in the &lt;b&gt;IAM User Guide&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createArchiveRuleTest() throws ApiException {
        String analyzerName = null;
        CreateArchiveRuleRequest createArchiveRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.createArchiveRule(analyzerName, createArchiveRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified analyzer. When you delete an analyzer, IAM Access Analyzer is disabled for the account or organization in the current or specific Region. All findings that were generated by the analyzer are deleted. You cannot undo this action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnalyzerTest() throws ApiException {
        String analyzerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteAnalyzer(analyzerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Deletes the specified archive rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteArchiveRuleTest() throws ApiException {
        String analyzerName = null;
        String ruleName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        api.deleteArchiveRule(analyzerName, ruleName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Retrieves information about an access preview for the specified analyzer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessPreviewTest() throws ApiException {
        String accessPreviewId = null;
        String analyzerArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccessPreviewResponse response = api.getAccessPreview(accessPreviewId, analyzerArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a resource that was analyzed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzedResourceTest() throws ApiException {
        String analyzerArn = null;
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnalyzedResourceResponse response = api.getAnalyzedResource(analyzerArn, resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified analyzer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzerTest() throws ApiException {
        String analyzerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnalyzerResponse response = api.getAnalyzer(analyzerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves information about an archive rule.&lt;/p&gt; &lt;p&gt;To learn about filter keys that you can use to create an archive rule, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html\&quot;&gt;IAM Access Analyzer filter keys&lt;/a&gt; in the &lt;b&gt;IAM User Guide&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getArchiveRuleTest() throws ApiException {
        String analyzerName = null;
        String ruleName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetArchiveRuleResponse response = api.getArchiveRule(analyzerName, ruleName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the specified finding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingTest() throws ApiException {
        String analyzerArn = null;
        String id = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingResponse response = api.getFinding(analyzerArn, id, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the policy that was generated using &lt;code&gt;StartPolicyGeneration&lt;/code&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGeneratedPolicyTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeResourcePlaceholders = null;
        Boolean includeServiceLevelTemplate = null;
        GetGeneratedPolicyResponse response = api.getGeneratedPolicy(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeResourcePlaceholders, includeServiceLevelTemplate);
        // TODO: test validations
    }

    /**
     * Retrieves a list of access preview findings generated by the specified access preview.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessPreviewFindingsTest() throws ApiException {
        String accessPreviewId = null;
        ListAccessPreviewFindingsRequest listAccessPreviewFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAccessPreviewFindingsResponse response = api.listAccessPreviewFindings(accessPreviewId, listAccessPreviewFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of access previews for the specified analyzer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessPreviewsTest() throws ApiException {
        String analyzerArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAccessPreviewsResponse response = api.listAccessPreviews(analyzerArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Retrieves a list of resources of the specified type that have been analyzed by the specified analyzer..
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnalyzedResourcesTest() throws ApiException {
        ListAnalyzedResourcesRequest listAnalyzedResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAnalyzedResourcesResponse response = api.listAnalyzedResources(listAnalyzedResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of analyzers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnalyzersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String type = null;
        ListAnalyzersResponse response = api.listAnalyzers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, type);
        // TODO: test validations
    }

    /**
     * Retrieves a list of archive rules created for the specified analyzer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listArchiveRulesTest() throws ApiException {
        String analyzerName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListArchiveRulesResponse response = api.listArchiveRules(analyzerName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a list of findings generated by the specified analyzer.&lt;/p&gt; &lt;p&gt;To learn about filter keys that you can use to retrieve a list of findings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html\&quot;&gt;IAM Access Analyzer filter keys&lt;/a&gt; in the &lt;b&gt;IAM User Guide&lt;/b&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsTest() throws ApiException {
        ListFindingsRequest listFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFindingsResponse response = api.listFindings(listFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all of the policy generations requested in the last seven days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPolicyGenerationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String principalArn = null;
        Integer maxResults = null;
        String nextToken = null;
        ListPolicyGenerationsResponse response = api.listPolicyGenerations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, principalArn, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves a list of tags applied to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the policy generation request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPolicyGenerationTest() throws ApiException {
        StartPolicyGenerationRequest startPolicyGenerationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartPolicyGenerationResponse response = api.startPolicyGeneration(startPolicyGenerationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Immediately starts a scan of the policies applied to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startResourceScanTest() throws ApiException {
        StartResourceScanRequest startResourceScanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startResourceScan(startResourceScanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a tag to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the criteria and values for the specified archive rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateArchiveRuleTest() throws ApiException {
        String analyzerName = null;
        String ruleName = null;
        UpdateArchiveRuleRequest updateArchiveRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateArchiveRule(analyzerName, ruleName, updateArchiveRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the status for the specified findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFindingsTest() throws ApiException {
        UpdateFindingsRequest updateFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateFindings(updateFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Requests the validation of a policy and returns a list of findings. The findings help you identify issues and provide actionable recommendations to resolve the issue and enable you to author functional policies that meet security best practices. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validatePolicyTest() throws ApiException {
        ValidatePolicyRequest validatePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ValidatePolicyResponse response = api.validatePolicy(validatePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

}
